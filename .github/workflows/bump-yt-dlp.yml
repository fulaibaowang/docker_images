name: Bump yt-dlp, create version folder, and tag

on:
  schedule:
    - cron: "25 3 * * *"   # Daily ~03:25 CET/CEST
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: bump-yt-dlp
  cancel-in-progress: true

jobs:
  bump:
    runs-on: ubuntu-latest

    env:
      TOOL: youtube
      SRC_DIR: youtube/src

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need tags/history

      - name: Sanity check source files
        run: |
          set -e
          test -f "${SRC_DIR}/Dockerfile"
          test -f "${SRC_DIR}/youtube_download_merge.py"
          echo "Found ${SRC_DIR}/Dockerfile and ${SRC_DIR}/youtube_download_merge.py"

      - name: Get latest yt-dlp release tag
        id: latest
        run: |
          set -e
          LATEST=$(curl -fsSL https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest | jq -r .tag_name)
          if [ -z "$LATEST" ] || [ "$LATEST" = "null" ]; then
            echo "Failed to fetch latest yt-dlp version."
            exit 1
          fi
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "tag=youtube-$LATEST" >> $GITHUB_OUTPUT
          echo "Latest yt-dlp: $LATEST (tag: youtube-$LATEST)"

      - name: Determine current released version
        id: current
        run: |
          set -e
          # Prefer the most recent youtube-* tag
          CURR_TAG_VERSION=$(
            git tag --list 'youtube-*' \
              | sed -E 's/^youtube-//' \
              | grep -E '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$' \
              | sort -V | tail -n1
          )
          if [ -n "$CURR_TAG_VERSION" ]; then
            echo "current=$CURR_TAG_VERSION" >> $GITHUB_OUTPUT
            echo "Detected current from tag: $CURR_TAG_VERSION"
            exit 0
          fi

          # Else, pick highest date-like folder under youtube/
          CURR_DIR_VERSION=$(
            ls -1d "${TOOL}"/*/ 2>/dev/null \
              | awk -F/ '{print $(NF-1)}' \
              | grep -E '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$' \
              | sort -V | tail -n1
          )
          if [ -n "$CURR_DIR_VERSION" ]; then
            echo "current=$CURR_DIR_VERSION" >> $GITHUB_OUTPUT
            echo "Detected current from folder: $CURR_DIR_VERSION"
            exit 0
          fi

          # Finally, read pin from source Dockerfile (youtube/src/Dockerfile)
          if grep -qE '^ARG[[:space:]]+YTDLP_VERSION=' "${SRC_DIR}/Dockerfile"; then
            CURR=$(grep -E '^ARG[[:space:]]+YTDLP_VERSION=' "${SRC_DIR}/Dockerfile" | cut -d'=' -f2)
          else
            CURR=$(grep -Eo 'yt-dlp==[0-9]{4}\.[0-9]{2}\.[0-9]{2}' "${SRC_DIR}/Dockerfile" | cut -d'=' -f2)
          fi
          echo "current=$CURR" >> $GITHUB_OUTPUT
          echo "Detected current from ${SRC_DIR}/Dockerfile: $CURR"

      - name: Compute run/skip gates
        id: checks
        run: |
          set -e
          LATEST="${{ steps.latest.outputs.latest }}"
          TAG="youtube-${{ steps.latest.outputs.latest }}"

          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            TAG_EXISTS=true
          else
            TAG_EXISTS=false
          fi

          if [ -d "${TOOL}/${LATEST}" ]; then
            FOLDER_EXISTS=true
          else
            FOLDER_EXISTS=false
          fi

          if [ "${{ steps.current.outputs.current }}" = "${LATEST}" ]; then
            UP_TO_DATE=true
          else
            UP_TO_DATE=false
          fi

          if $UP_TO_DATE || $TAG_EXISTS || $FOLDER_EXISTS; then
            SHOULD_RUN=false
          else
            SHOULD_RUN=true
          fi

          echo "tag_exists=$TAG_EXISTS"       >> $GITHUB_OUTPUT
          echo "folder_exists=$FOLDER_EXISTS" >> $GITHUB_OUTPUT
          echo "up_to_date=$UP_TO_DATE"       >> $GITHUB_OUTPUT
          echo "should_run=$SHOULD_RUN"       >> $GITHUB_OUTPUT

          echo "Gate summary -> should_run=$SHOULD_RUN (up_to_date=$UP_TO_DATE, tag_exists=$TAG_EXISTS, folder_exists=$FOLDER_EXISTS)"

      - name: Create version folder and copy files
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          VERS="${{ steps.latest.outputs.latest }}"
          mkdir -p "${TOOL}/${VERS}"
          cp "${SRC_DIR}/Dockerfile" "${TOOL}/${VERS}/Dockerfile"
          cp "${SRC_DIR}/youtube_download_merge.py" "${TOOL}/${VERS}/youtube_download_merge.py"
          echo "Created ${TOOL}/${VERS} and copied files from ${SRC_DIR}/."

      - name: Pin yt-dlp in new Dockerfile
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          NEW_DOCKERFILE="${TOOL}/${{ steps.latest.outputs.latest }}/Dockerfile"
          if grep -qE '^ARG[[:space:]]+YTDLP_VERSION=' "$NEW_DOCKERFILE"; then
            sed -i -E "s|^ARG[[:space:]]+YTDLP_VERSION=.*$|ARG YTDLP_VERSION=${{ steps.latest.outputs.latest }}|" "$NEW_DOCKERFILE"
          else
            sed -i -E "s|(pip install .*)yt-dlp==[0-9]{4}\.[0-9]{2}\.[0-9]{2}|\1yt-dlp==${{ steps.latest.outputs.latest }}|" "$NEW_DOCKERFILE"
            sed -i -E "/pip install --upgrade yt-dlp/d" "$NEW_DOCKERFILE"
          fi
          echo "Pinned yt-dlp=${{ steps.latest.outputs.latest }} in $NEW_DOCKERFILE:"
          grep -nE 'YTDLP_VERSION|yt-dlp==' "$NEW_DOCKERFILE" || true

      - name: Commit version folder (if needed)
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${TOOL}/${{ steps.latest.outputs.latest }}"
          git commit -m "chore: add ${TOOL}/${{ steps.latest.outputs.latest }} (yt-dlp ${{ steps.latest.outputs.latest }})" \
            || echo "No changes to commit."

      - name: Use PAT for authenticated pushes (to trigger downstream workflows)
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          git remote set-url origin \
            https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git

      - name: Push commit
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          # Push to the currently checked-out branch (usually the default branch)
          git push origin HEAD

      - name: Create and push tag youtube-<version>
        if: steps.checks.outputs.should_run == 'true'
        run: |
          set -e
          TAG="${{ steps.latest.outputs.tag }}"
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag already exists: ${TAG}"
          else
            git tag -a "${TAG}" -m "yt-dlp ${{ steps.latest.outputs.latest }}"
            git push origin "${TAG}"
            echo "Pushed tag: ${TAG}"
          fi
